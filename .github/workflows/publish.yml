name: 'publish'
on:
  push:
    branches:
      - release

jobs:
  simple:
    strategy:
      fail-fast: false
      matrix:
        #        platform: [macos-latest, ubuntu-20.04, windows-latest]
        platform: [ windows-latest ]

    name: Test `cargo check/test/build` on ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - uses: actions/checkout@v3
      - run: rustup toolchain install stable --profile minimal --no-self-update

  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        #        platform: [macos-latest, ubuntu-20.04, windows-latest]
        platform: [ windows-latest ]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/checkout@v3
      - name: install Rust stable
        run: rustup toolchain install stable --profile minimal --no-self-update

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: pnpm install

      - uses: Swatinem/rust-cache@v2
        with:

          # Determines whether workspace `target` directories are cached.
          # If `false`, only the cargo registry will be cached.
          # default: "true"
          cache-targets: true

          # Determines if the cache should be saved even when the workflow has failed.
          # default: "false"
          cache-on-failure: true

          # Determines which crates are cached.
          # If `true` all crates will be cached, otherwise only dependent crates will be cached.
          # Useful if additional crates are used for CI tooling.
          # default: "false"
          cache-all-crates: true

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: __VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'Focus Assistant v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false